
//! Autogenerated weights for pallet_dex
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-12, STEPS: `20`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Stanlys-Air`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bitgreen-parachain
// benchmark
// pallet
// --chain=dev
// --steps=20
// --repeat=1
// --log=warn
// --pallet=pallet-dex
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./pallets/dex/src/weights.rs
// --template=./.maintain/bitg-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_dex.
pub trait WeightInfo {
	fn create_sell_order() -> Weight;
	fn cancel_sell_order() -> Weight;
	fn buy_order() -> Weight;
	fn force_set_payment_fee() -> Weight;
	fn force_set_purchase_fee() -> Weight;
}

/// Weights for pallet_dex using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Dex OrderCount (r:1 w:1)
	// Storage: Dex Orders (r:0 w:1)
	fn create_sell_order() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(74_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Dex Orders (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn cancel_sell_order() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(56_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Dex Orders (r:1 w:1)
	// Storage: Dex PaymentFees (r:1 w:0)
	// Storage: Dex PurchaseFees (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	fn buy_order() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(49_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Dex PaymentFees (r:0 w:1)
	fn force_set_payment_fee() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Dex PurchaseFees (r:0 w:1)
	fn force_set_purchase_fee() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Dex OrderCount (r:1 w:1)
	// Storage: Dex Orders (r:0 w:1)
	fn create_sell_order() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(74_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Dex Orders (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn cancel_sell_order() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(56_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Dex Orders (r:1 w:1)
	// Storage: Dex PaymentFees (r:1 w:0)
	// Storage: Dex PurchaseFees (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	fn buy_order() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(49_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Dex PaymentFees (r:0 w:1)
	fn force_set_payment_fee() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Dex PurchaseFees (r:0 w:1)
	fn force_set_purchase_fee() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}